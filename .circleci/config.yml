version: 2.1

jobs:
  run_tests:
    docker:
      - image: python:3.8
      - image: postgres
        environment:
          POSTGRES_DB: "zosia"
          POSTGRES_USER: "zosia"
          POSTGRES_PASSWORD: "zosia"
    steps:
      - checkout
      - run:
          name: Install requirements
          command: |
            pip3 install -r app/requirements.txt
            pip3 install flake8 coverage
      - run:
          name: Run run test with coverage check
          command: cd app/src && coverage run --source='.' --omit='*/migrations/*,zosia16/*,*/tests.py,*/__init__.py'  manage.py test --settings=zosia16.settings.test
      - run:
          name: Run syntax check
          command: flake8 --exclude=migrations --max-line-length=120 app/src || true
      - run:
          name: Show tests coverage report
          command: cd app/src && coverage report -m

  build_and_push_to_ecr:
    environment:
      AWS_ACCOUNT_ID: "605137242661"
      AWS_DEFAULT_REGION: "eu-central-1"
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: apt-get update
          command: apt-get update
      - run:
          name: Install awscli v2
          command: |
            DEBIAN_FRONTEND=noninteractive apt-get install -y jq unzip groff curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
            unzip awscliv2.zip
            ./aws/install
            rm -rf awscliv2.zip aws
      - run:
          name: Install docker CLI
          command: |
            DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt install docker-ce-cli
      - run:
          name: Install docker-compose
          command: |
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod 755 /usr/local/bin/docker-compose
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build docker images
          command: TAG="latest" docker-compose -f docker-compose.prod.yml build
      - run:
          name: Push image to ECR
          command: AWS_ACCESS_KEY_ID=${AWS_ACCESS_ID} AWS_SECRET_ACCESS_KEY=${AWS_ACCESS_SECRET_KEY} VERSION_TAG=${CIRCLE_SHA1} .ecs/upload_2_ecr.sh

  deploy_new_version:
    environment:
      AWS_ACCOUNT_ID: "605137242661"
      AWS_DEFAULT_REGION: "eu-central-1"
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: apt-get update
          command: apt-get update
      - run:
          name: Install awscli v2
          command: |
            DEBIAN_FRONTEND=noninteractive apt-get install -y jq unzip groff curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - checkout
      - run:
          name: Create new Task Definition
          command: AWS_ACCESS_KEY_ID=${AWS_ACCESS_ID} AWS_SECRET_ACCESS_KEY=${AWS_ACCESS_SECRET_KEY} VERSION_TAG=${CIRCLE_SHA1} .ecs/prepare_task_def.sh
      - run:
          name: Update service and wait
          command: AWS_ACCESS_KEY_ID=${AWS_ACCESS_ID} AWS_SECRET_ACCESS_KEY=${AWS_ACCESS_SECRET_KEY} .ecs/update_service_with_rollback.sh
      - run:
          name: Purge cache
          command: |
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
              -H "Authorization: Bearer ${CF_CACHE_CLEANER_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'

workflows:
  version: 2
  build:
    jobs:
      - run_tests
      - build_and_push_to_ecr:
          requires:
            - run_tests
          filters:
            branches:
              only:
                - master
      - deploy_new_version:
          requires:
            - build_and_push_to_ecr
          filters:
            branches:
              only:
                - master
